{"version":3,"sources":["Nav.js","About.js","Shop.js","ItemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","to","style","className","About","Shop","useEffect","fetchItems","useState","items","setItems","a","fetch","data","json","console","log","map","item","key","itemid","name","Item","match","fetchItem","images","setItem","params","id","src","transparent","alt","Home","App","path","exact","component","ItemDetail","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPA0BeA,MAtBf,WAEI,IAAMC,EAAW,CACbC,MAAO,SAEX,OACI,6BACI,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAOH,GAChB,2CAEJ,wBAAII,UAAU,QACV,kBAAC,IAAD,CAAMD,MAAOH,EAAUE,GAAG,UACtB,sCAEJ,kBAAC,IAAD,CAAMC,MAAOH,EAAUE,GAAG,SACtB,wCCRLG,MARf,WACI,OACI,6BACI,wBAAID,UAAU,eAAd,gB,gCCqBGE,MAvBf,WAEIC,oBAAU,WACNC,KACD,IAJS,MAMcC,mBAAS,IANvB,mBAMLC,EANK,KAMEC,EANF,KAONH,EAAU,sCAAG,8BAAAI,EAAA,qEACIC,MAAM,qEADV,cACTC,EADS,gBAEKA,EAAKC,OAFV,OAETL,EAFS,OAGfM,QAAQC,IAAIP,EAAMA,OAClBC,EAASD,EAAMA,OAJA,yCAAH,qDAMhB,OACI,6BACKA,EAAMQ,IAAI,SAAAC,GAAI,OACX,wBAAIf,UAAU,cAAcgB,IAAKD,EAAKE,QAClC,kBAAC,IAAD,CAAMnB,GAAE,gBAAWiB,EAAKE,SAAWF,EAAKG,WCM7CC,MAvBf,YAA0B,IAAVC,EAAS,EAATA,MACZjB,oBAAU,WACNkB,KACD,IAHkB,MAKGhB,mBAAS,CAC7BiB,OAAQ,KANS,mBAKdP,EALc,KAKRQ,EALQ,KAQfF,EAAS,sCAAG,8BAAAb,EAAA,qEACUC,MAAM,6DAAD,OAA8DW,EAAMI,OAAOC,KAD1F,cACRJ,EADQ,gBAEKA,EAAUV,OAFf,OAERI,EAFQ,OAGdQ,EAAQR,GAHM,yCAAH,qDAOf,OACI,yBAAKf,UAAU,eACX,wBAAIA,UAAU,oBAAoBe,EAAKG,MACvC,yBAAKlB,UAAU,OAAO0B,IAAKX,EAAKO,OAAOK,YAAaC,IAAI,O,OCGpE,IAAMC,EAAO,kBACX,6BACE,wBAAI7B,UAAU,eAAd,aACA,uBAAGA,UAAU,0CAAb,yBAIW8B,EAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWhC,IAChC,kBAAC,IAAD,CAAO8B,KAAK,QAAQC,OAAK,EAACC,UAAW/B,IACrC,kBAAC,IAAD,CAAO6B,KAAK,YAAYE,UAAWC,QCNzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.16ea19b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n\r\n    const navStyle = {\r\n        color: 'white'\r\n    };\r\n    return (\r\n        <nav>\r\n            <Link to=\"/\" style={navStyle}>\r\n                <h3>React Home</h3>\r\n            </Link>\r\n            <ul className=\"navb\">\r\n                <Link style={navStyle} to=\"/about\" >\r\n                    <li>About</li>\r\n                </Link>\r\n                <Link style={navStyle} to=\"/shop\">\r\n                    <li>Shop</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"text-center\">About Page</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Shop() {\r\n\r\n    useEffect(() => {\r\n        fetchItems();\r\n    }, []);\r\n\r\n    const [items, setItems] = useState([]);\r\n    const fetchItems = async () => {\r\n        const data = await fetch('https://fortnite-public-api.theapinetwork.com/prod09/upcoming/get');\r\n        const items = await data.json();\r\n        console.log(items.items);\r\n        setItems(items.items);\r\n    }\r\n    return (\r\n        <div>\r\n            {items.map(item => (\r\n                <h1 className=\"text-center\" key={item.itemid}>\r\n                    <Link to={`/shop/${item.itemid}`}>{item.name}</Link></h1>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Shop;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Item({ match }) {\r\n    useEffect(() => {\r\n        fetchItem();\r\n    }, []);\r\n\r\n    const [item, setItem] = useState({\r\n        images: {}\r\n    });\r\n    const fetchItem = async () => {\r\n        const fetchItem = await fetch(`https://fortnite-public-api.theapinetwork.com/item/get?id=${match.params.id}`);\r\n        const item = await fetchItem.json();\r\n        setItem(item);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"itemDetails\">\r\n            <h1 className=\"text-center mt-5\">{item.name}</h1>\r\n            <img className=\"mt-3\" src={item.images.transparent} alt=\"\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Nav from './Nav';\r\nimport About from './About';\r\nimport Shop from './Shop';\r\nimport ItemDetail from './ItemDetail';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route path=\"/shop\" exact component={Shop} />\r\n          <Route path=\"/shop/:id\" component={ItemDetail} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1 className=\"text-center\">Home Page</h1>\r\n    <p className=\"text-center text-dark font-weight-bold\">Go to Shop -->> </p>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}